{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAYhD,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAIhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCLdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCF,EADjC,+DAEFG,MAAMD,GAFJ,cAEfE,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAGpCY,QAAQC,IAAIR,GAXS,kBAYdA,GAZc,4CAAH,sDCEPS,EAAc,SAAC,GAAuB,EAArBN,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACvC,OACE,sBAAKe,UAAU,yCAAf,UACE,qBAAKC,IAAKhB,EAAKiB,IAAKR,IACpB,4BAAIA,QCFGS,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCoB,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OARAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAACC,GACtBH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGZ,CAACrB,IACGsB,EDZ2BK,CAAa3B,GAAjCY,EADyB,EAC/BN,KAAce,EADiB,EACjBA,QACtB,OACE,qCACE,6BAAKrB,IACJqB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aETnBkB,EAAe,WAAO,IAAD,EACI1C,mBAAS,CAAC,gBADd,mBACzB2C,EADyB,KACb5C,EADa,KAMhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG4C,EAAWrB,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCVxB8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.7d427af1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=G20uns7NHioDuHjcH6Ws7YOMhUFCYU0I`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url,\n  }));\n\n  console.log(gifs);\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__zoomIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p>cargando...</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./AddCategory\";\nimport { GifGrid } from \"./GifGrid\";\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\n  // const handleAdd = () => {\n  //   setCategories([...categories, \"Saint Seiya\"]);\n  // };\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./components/GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}